#print("welcome to the world of python")
#if 2 > 2:
 #print("its grtr")
#elif 2 < 2:
   #print(" its smaller ")
#else: 
   #print("equal")
#def Main():
   #print(sum(12,13))  

#def sum(x,y):
    #d=x+y
    #return d 
#Main()	
#x=int("3")   
#print(x)
#a="hello world"
#print(a[1])
#print(a[2:5])
#print(a.lower())
#print(a.upper())
#print(a.replace("h","j"))#split is used for removing space from starting ang ending of string.len for length,input() for taking input from keyboard.
#thislist=["apple","banana","mango"]
#print(thislist)
#print(thislist[1])
#thislist[1]="tomato"
#print(thislist)
#for x in thislist:
 #print(x)# if "apple" in thislist: print(),print(len[thisist]),thislist.insert(1,"kela"),thislist.remove("banana"),thislist.pop(),del thislist[0],thislist.clear() wil clear all the list value,,,,
#in tuple everithing will be same just no chznges can bedomne in the value,four collection data types in the Python programming language:List is a collection which is ordered and changeable. Allows duplicate members.
#Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
#Set is a collection which is unordered and unindexed. No duplicate members.
#Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.
#n Python tuples are written with round brackets.list in the sql]r bracket,In Python sets are written with curly brackets.In Python dictionaries are written with curly brackets, and they have keys and values.
#thisdisc={
#"fname":"sunil",
#"lname":"kumar",
#"dob":1996
#}
#print(thisdisc)
##x=thisdisc["fname"]#even thisdisc.get("fname")
#print(x)
#The elif keyword is pythons way of saying "if the previous conditions were not true, then try this condition".
#print("A") if 2 > 3 else print("B") even this is the method for executing if ..else if 2<3 and 3<4 : print...this way and or can be used.
#a=1
#while a<8:
 #print(a)
 #if a==7:
  #break means come out of the main loop but in case of continue it will stop the curent iteration and start with the new iteration.
 #a+=1 
#for x in "banana":
 #print(x)
#To loop through a set of code a specified number of times, we can use the range() function,even we can use range(2,6) here increament will be dafaultone that is one,range(2,9,3) here increament will be 3...
#for x in range(6):
 #print(x)
 #print(x)
#fname=["sunil","hanifa"]
#lname=["kumar","khan"] 
#for x in fname:
 #for y in lname:
  #print(x,y) for nested loop
#def funct1():
 #x=input("ur first name")  
 #y= input("ur last name ")
 #printname(x,y)  
#funct1() 
#x=20
#def funct2(i):
 #print(i)
 ###funct2(i*2)
#funct2(2) 
#funct2(2) 
##A lambda function is a small anonymous function.A lambda function can take any number of arguments, but can only have one expression.syntax:lambda arguments : expression
#x=lambda a,b,c:a+b+c
#print(x(2,3,4))
#x=lambda a,b,c:(a+b)*c
#print(x(2,3,4)) 
#cars=["chevy","suzuki","hyundai"]
#print(cars)
#for x in cars:
 #print(x)
#x=cars[2]
#print(x)
#cars[0]="honda"
#print(cars)
#cars.append("honey")
#print(cars) #cars.pop(1) is used to remove 2nd element,cars.remove("honda") is used toremove the particular element. 
#class emp:#All classes have a function called __init__(), which is always executed when the class is being initiated.
 #def __init__(self,name,age,id):
  #self.name=name#The self parameter is a reference to the class instance itself, and is used to access variables that belongs to the class.delete properties on objects by using the del keyword:
  #elf.age=age#delete objects by using the del keyword
  #self.id=id
#emp1=emp("sunil",12,32)
#print("empname is "+emp1.name+" "+"of age"+" "+str(emp1.age)+" "+str(emp1.id))  
#Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.All these objects have a iter() method which is used to get an iterator  
#mystr="banana"#here we have used for string.
#myiter=iter(mystr)
#print(next(myiter))
##print(next(myiter))
#print(next(myiter))
#print(next(myiter))
#To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.
#The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.The __next__() method also allows you to do operations, and must return the next item in the sequence.
#class mynum:
## self.a=1
  #return self
 #def __next__(self):
  #if self.a<=20:
   #x=self.a
   #self.a+=1
   #return x
  #lse: 
   #stopiteration 
#myclass=mynum()
#myiter=iter(myclass)
#for x in myiter:
 # print(x)     
#import mymodule as mdl
#mdl.funct1()
#print("name is"+" "+ mdl.funct1().name +" "+"with age"+" "+mdl.funct1().age ) 

